{
	"info": {
		"_postman_id": "d200364b-b1e7-4bdd-aaae-11e7f30d376f",
		"name": "Homework2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18235276"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Correct text\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first?name=Dany&age=18",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Dany"
						},
						{
							"key": "age",
							"value": "18"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							" var jsonData = pm.response.json();\r",
							"\r",
							"let resp_age = jsonData.age;\r",
							"let resp_name = jsonData.name;\r",
							"let resp_salary = jsonData.salary;\r",
							"let family = jsonData.family;\r",
							"let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"//Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"let req_age = req.age;\r",
							"let req_name = req.name;\r",
							"let req_salary = req.salary;\r",
							"let req_u_salary_1_5_year = req_salary * 4;\r",
							"console.log(req_salary);\r",
							"console.log(resp_salary);\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"correct name\", function () {\r",
							"    pm.expect(resp_name).to.equal(\"Hanna\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"correct age\", function () {\r",
							"    pm.expect(resp_age).to.equal(\"40\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе  равно salary s request (salary вбить руками.)\r",
							"pm.test(\"correct salary\", function () {\r",
							"    pm.expect(resp_salary).to.equal(500);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"correct name\", function () {\r",
							"    pm.expect(req_name).to.equal(resp_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"correct age\", function () {\r",
							"    pm.expect(req_age).to.equal(resp_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"correct salary\", function () {\r",
							"    pm.expect(Number(req_salary)).to.equal(resp_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"pm.test(\"show Family in console\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"family\");\r",
							"\r",
							"    console.log(family)\r",
							"});\r",
							"\r",
							"//  Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"correct u_salary_1_5_year \", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.equal(req_u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Hanna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"let responce = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"correct name\", function () {\r",
							"    pm.expect(responce.name).to.equal(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"correct age\", function () {\r",
							"    pm.expect(responce.age).to.equal(req.age);\r",
							"\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"correct salary\", function () {\r",
							"    pm.expect(String(responce.salary)).to.eq(req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(responce.family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"has dog a name\", function () {\r",
							"    pm.expect(responce.family.pets.dog.name).not.eq(undefined);\r",
							"});\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"has dog an age\", function () {\r",
							"    pm.expect(responce.family.pets.dog.age).not.eq(undefined);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name of dog is lucky \", function () {\r",
							"    pm.expect(responce.family.pets.dog.name).to.eq(\"Luky\");\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"has age 4\", function () {\r",
							"    pm.expect(responce.family.pets.dog.age).to.eq(4);\r",
							"});\r",
							"for (i in responce.family){\r",
							"    console.log(responce.family[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ratmir&age=14&salary=800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ratmir"
						},
						{
							"key": "age",
							"value": "14"
						},
						{
							"key": "salary",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"let resp = pm.response.json(); \r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject(); \r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(resp.name).to.eq(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(String(resp.age)).to.equal(req.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"pm.test(\"show salary from request in console\", function () {\r",
							"    console.log(req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"pm.test(\"show salary from response in console\", function () {\r",
							"    console.log(resp.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"pm.test(\"show 0-element array salary in console\", function () {\r",
							"    console.log(resp.salary[0]);\r",
							"});\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"show 1-element array salary in console\", function () {\r",
							"    console.log(resp.salary[1]);\r",
							"}); \r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"show o-element array salary in console\", function () {\r",
							"    console.log(resp.salary[2]);\r",
							"});\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check 0 element array salary\", function () {\r",
							"    pm.expect(String(resp.salary[0])).to.eq(req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check 1 element array salary\", function () {\r",
							"    pm.expect(resp.salary[1]).to.eq(String(req.salary * 2));\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check 2 element array salary\", function () {\r",
							"    pm.expect(resp.salary[2]).to.eq(String(req.salary * 3));\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req.age);\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for(let i = 0; i < resp.salary.length; i++){\r",
							"    console.log(resp.salary[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Helen&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Helen"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//pm.variables.get(\"salary\");\r",
							"\r",
							"// Вставить параметр age из окружения в age\r",
							"//pm.variables.get(\"age\");\r",
							"\r",
							"// Вставить параметр name из окружения в name\r",
							"//pm.variables.get(\"name\");\r",
							"\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"has response param start_qa_salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).not.eql(undefined);\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"has response param qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).not.eql(undefined);\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"has response param qa_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"has response param qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"has response param qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"has response param person\", function () {\r",
							"   pm.expect(JSON.stringify(resp)).to.include(\"person\");\r",
							"});\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check start_qa_salary\", function () {\r",
							"    pm.expect(String(resp.start_qa_salary)).to.equal(req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eq(req.salary * 2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eq(req.salary * 2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let qa_salary_after_18_months = resp[\"qa_salary_after_1.5_year\"];\r",
							"\r",
							"pm.test(\"check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(qa_salary_after_18_months).to.eq(req.salary * 3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let qa_salary_after_42_months = resp[\"qa_salary_after_3.5_years\"];\r",
							"\r",
							"pm.test(\"check qa_salary_after_3.5_year\", function () {\r",
							"    pm.expect(qa_salary_after_42_months).to.eq(req.salary * 3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"is the firstt elem equal salary\", function () {\r",
							"    pm.expect(String(resp.person.u_name[1])).to.eq(req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"check u_age equal age \", function () {\r",
							"    pm.expect(String(resp.person.u_age)).to.eq(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"check u_salary_after_5_years\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eq(req.salary * 4.2);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for( i in resp.person){\r",
							"     console.log(resp.person[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
