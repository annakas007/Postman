{
	"info": {
		"_postman_id": "3c6a1be0-e98d-44c6-b232-0d1a7711afe4",
		"name": "user_info_2 Negative",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18235276"
	},
	"item": [
		{
			"name": "WrongNameLength",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let name = request.data.name;\r",
							"let age = request.data.age;\r",
							"let salary = request.data.salary;\r",
							"\r",
							"function nameValidation(value){\r",
							"    return value && value.length > 2 && value.length < 41 && value.trim === value;\r",
							"}\r",
							"function ageValidation(value){\r",
							"    return value && value > 17 && value < 121 && !isNaN(value) && Number.isInteger(+value)\r",
							"}\r",
							"function salaryValidation(value){\r",
							"    return value && value > 0 && value < 1000001 && !isNaN(value) && Number.isInteger(+value)\r",
							"}\r",
							"function validate(name, age, salary){\r",
							"    return ageValidation(age) && nameValidation(name) && salaryValidation(salary)\r",
							"}\r",
							"if(validate(name, age, salary)){\r",
							"    pm.test('200 status code name == ${name} age == ${age} salary == ${salary}', () =>{\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"}else{\r",
							"    pm.test(`NOT 200 status cod name == ${name} age == ${age} salary == ${salary}`, () =>{\r",
							"        pm.response.to.not.have.status(200)\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "An",
							"type": "text"
						},
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NameWithPrefixTrim",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let name = request.data.name;\r",
							"let age = request.data.age;\r",
							"let salary = request.data.salary;\r",
							"\r",
							"function nameValidation(value){\r",
							"    return value && value.length > 2 && value.length < 121 && value.trim === value\r",
							"}\r",
							"function ageValidation(value){\r",
							"    return value && value > 17 && value < 121 && !isNaN(value) && Number.isInteger(+value)\r",
							"}\r",
							"function salaryValidation(value){\r",
							"    return value && !isNaN(value) && Number.isInteger(+value) && value > 0 && value < 1000000\r",
							"}\r",
							"function validate(name, age, salary){\r",
							"    nameValidation(name) && ageValidation(age) && salaryValidation(salary)\r",
							"}\r",
							"if(validate(name, age, salary)){\r",
							"    pm.test(`200 statuscod with name == ${req.name} age ==${age} salary == ${salary}`, () => {\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"}else{\r",
							"    pm.test(`Not 200 statuscod with name == ${name} age == ${age} salary == ${salary}`, () =>{\r",
							"        pm.response.to.not.have.status(200)\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": " Ann",
							"type": "text"
						},
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "WrongNameLength",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let name = request.data.name;\r",
							"let age = request.data.age;\r",
							"let salary = request.data.salary;\r",
							"\r",
							"function nameValidation(value){\r",
							"    return value && isNaN(value) && value.length > 2 && value.length < 41 && value.trim === value\r",
							"}\r",
							"function ageValidation(value){\r",
							"    return value && !isNaN(value) && value > 17 && value <121 && Number.isInteger(+value)\r",
							" \r",
							"}\r",
							"function salaryValidation(value){\r",
							"    return value && !isNaN(value) && Number.isInteger(value) && value > 0 && value < 1000001 \r",
							"}\r",
							"function validate(name, age, salary){\r",
							"    return nameValidation(name) && ageValidation(age) && salaryValidation(salary)\r",
							"}\r",
							"\r",
							"if(validate(name, age, salary)){\r",
							"    pm.test(`200 status code with name == ${name} age == ${age} salary ==${salary}`, () =>{\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"}else{\r",
							"    pm.test(`NOT 200 status code with name ==${name} age ==${age} salary == ${salary}`, () => {\r",
							"        pm.response.to.not.have.status(200)\r",
							"    })\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "qqqqqqqqqqwwwwwwwwwweeeeeeeeeerrrrrrrrrry",
							"type": "text"
						},
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "EmptyName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let name = request.data.name;\r",
							"let age = request.data.age;\r",
							"let salary = request.data.salary;\r",
							"\r",
							"function nameValidation(value){\r",
							"    return value && isNaN(value) && value.length > 2 && value.length < 41 && value.trim === value\r",
							"}\r",
							"function ageValidation(value){\r",
							"    return value && !isNaN(value) && value > 17 && value <121 && Number.isInteger(+value)\r",
							" \r",
							"}\r",
							"function salaryValidation(value){\r",
							"    return value && !isNaN(value) && Number.isInteger(value) && value > 0 && value < 1000001 \r",
							"}\r",
							"function validate(name, age, salary){\r",
							"    return nameValidation(name) && ageValidation(age) && salaryValidation(salary)\r",
							"}\r",
							"\r",
							"if(validate(name, age, salary)){\r",
							"    pm.test(`200 status code with name == ${name} age == ${age} salary ==${salary}`, () =>{\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"}else{\r",
							"    pm.test(`NOT 200 status code with name ==${name} age ==${age} salary == ${salary}`, () => {\r",
							"        pm.response.to.not.have.status(200)\r",
							"    })\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "",
							"type": "text"
						},
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NameWithSpace",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req = request.data;\r",
							"let name = req.name;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"\r",
							"function nameValidation(value){\r",
							"    return value && isNaN(value) && value.length > 2 && value.length < 41 && value.trim === value\r",
							"}\r",
							"function ageValidation(value){\r",
							"    return value && !isNaN(value) && Number.isInteger(value) && value > 17 && value < 121 \r",
							"}\r",
							"function salaryValidation(value){\r",
							"    return value && !isNaN(value) && Number.isInteger(value) && value > 0 && value < 1000001\r",
							"}\r",
							"function validate(name, age, salary){\r",
							"    return nameValidation(name) && ageValidation(age) && salaryValidation(salary)\r",
							"}\r",
							"if (validate(name, age, salary)){\r",
							"    pm.test(`The name not  consist from space name =${name} age = ${age} salary = ${salary}`, ()=>{\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"}else{\r",
							"    pm.test(`The name consist from space name =${name} age = ${age} salary = ${salary}`, ()=>{\r",
							"        pm.response.to.not.have.status(200)\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "     ",
							"type": "text"
						},
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	]
