{
	"info": {
		"_postman_id": "416a649d-93ad-48b4-b659-3a3faf0022b4",
		"name": "Homework2T",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18235276"
	},
	"item": [
		{
			"name": "object_info_4.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"//13 Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"//* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary.\r",
							"\r",
							"let respSalary = pm.response.json().salary\r",
							"let reqSalary = pm.request.url.query.get('salary')\r",
							"console.log(reqSalary)\r",
							"\r",
							"for(let i = 0; i < respSalary.length; i++){ \r",
							"pm.test(`${reqSalary} * ${i +1 }` , function () {\r",
							"        pm.expect(+respSalary[i]).to.eql(+reqSalary *(i+1));\r",
							"    \r",
							"})\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Helen&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Helen"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4.2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"//13 Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"//* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary.\r",
							"\r",
							"let respSalary = pm.response.json().salary\r",
							"let reqSalary = pm.request.url.query.get('salary')\r",
							"\r",
							"respSalary.forEach((salary,index) => {\r",
							"    pm.test(`${reqSalary} * ${index +1} ===${salary}`, () => {\r",
							"        pm.expect(reqSalary * (index+1)).to.eql(+salary)\r",
							"    })\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Helen&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Helen"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"// Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"let resp = {\r",
							"    name : pm.response.json().name,\r",
							"    age : String(pm.response.json().age),\r",
							"    salary : String(pm.response.json().salary)\r",
							"}\r",
							"pm.test(\"1.Response odject and request object are equl\", () => {\r",
							"    pm.expect(req).to.deep.equal(resp)\r",
							"})\r",
							"// если много полей\r",
							"let respo = pm.response.json(); \r",
							"let respObject = {};\r",
							"for(key in req){\r",
							"    respObject[key] = isNaN(respo[key]) ? respo[key] : +respo[key];\r",
							"    req[key] = isNaN(req[key]) ? req[key] : +req[key]; \r",
							"    }\r",
							"pm.test(\"2.Response odject and request object are equl\", () => {\r",
							"    pm.expect(req).to.deep.equal(respObject)    \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ratmir&age=14&salary=800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ratmir"
						},
						{
							"key": "age",
							"value": "14"
						},
						{
							"key": "salary",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"//1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = request.data;\r",
							"\r",
							"     for( let key in resp){\r",
							"         pm.test(`To have the params ${key}`, function () {\r",
							"            pm.expect(resp).to.have.property(key);\r",
							"        });\r",
							"    }\r",
							"    \r",
							"    for( key in resp.person){\r",
							"        pm.test(`To have the params ${key} `, function () {\r",
							"            pm.expect(resp.person).to.have.property(key);\r",
							"        });\r",
							"    }\r",
							"\r",
							"    \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2.1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"//1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let keyIsInJson = ['start_qa_salary', 'qa_salary_after_6_months', 'qa_salary_after_12_months', 'qa_salary_after_1.5_year', 'qa_salary_after_3.5_years', 'person'];\r",
							"keyIsInJson.forEach(key => {\r",
							"    pm.test(`Response has ${key}`, () =>{\r",
							"        pm.expect(resp).to.have.property(key);\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2.2**",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = request.data;\r",
							"\r",
							"for( key in resp){\r",
							"    if(key.includes(\"salary\")){\r",
							"        let k = resp[key] / +req.salary;\r",
							"           pm.test(`check the ${key} = ${req.salary} * ${k}  `, function () {\r",
							"               pm.expect(resp[key]).to.eql(req.salary * k);\r",
							"            }\r",
							"        );\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2.2** Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let salary = request.data.salary;\r",
							"\r",
							"let koff = {\r",
							"    \"start_qa_salary\" : 1,\r",
							"    \"qa_salary_after_6_months\" : 2,\r",
							"    \"qa_salary_after_3.5_years\" : 3.8,\r",
							"    \"qa_salary_after_12_months\" : 2.7,\r",
							"    \"qa_salary_after_1.5_year\" : 3.3\r",
							"}\r",
							"for(let key in koff){\r",
							"    pm.test(`${key} from salary = salary from request * ${koff[key]}`, () => {\r",
							"        pm.expect(+resp[key]).to.eql(salary * koff[key])\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2.3***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"//*** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = request.data;\r",
							"\r",
							"for ( key in resp) { \r",
							"    pm.test(`To have a params ${key}`, function () {\r",
							"        pm.expect(resp).to.have.property(key);\r",
							"        if(key.includes(\"salary\")){\r",
							"            k  = resp[key] / req.salary;\r",
							"            pm.test(`check the ${key} = ${req.salary} * ${k}`, function () {\r",
							"                pm.expect(resp[key]).to.eql(req.salary * k);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2.3*** Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"//*** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let salary = request.data.salary;\r",
							"let koff = {\r",
							"    \"start_qa_salary\" : 1,\r",
							"    \"qa_salary_after_6_months\" : 2,\r",
							"    \"qa_salary_after_3.5_years\" : 3.8,\r",
							"    \"qa_salary_after_12_months\" : 2.7,\r",
							"    \"qa_salary_after_1.5_year\" : 3.3,\r",
							"    \"person\" : ''\r",
							"}\r",
							"\r",
							"for(let key in koff){\r",
							"    pm.test(`Response has ${key}`, () => {\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"    })\r",
							"    if(key != 'person'){\r",
							"        pm.test(`check ${key} from response = salary from request * ${koff[key]}`, () =>{\r",
							"        pm.expect(+resp[key]).to.eql(salary * koff[key])\r",
							"        })\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
