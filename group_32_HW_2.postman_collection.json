{
	"info": {
		"_postman_id": "66443207-2b3c-41bc-8e83-bd100e183274",
		"name": "group_32_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18235276"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test('is status code 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test('check response body', function(){\r",
							"    pm.response.to.have.body('This is the first responce from server!ss')\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test('Is status code 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json()\r",
							"console.log(resp.name)\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test('check type name from response is string', function(){\r",
							"    pm.expect(resp.name).to.be.a('string')\r",
							"})\r",
							"pm.test('check value name from request to equal value name from response', function(){\r",
							"    pm.expect(resp.name).to.eql('Hanna')\r",
							"})\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test('check type age response is number', function(){\r",
							"    pm.expect(resp.age).to.be.a('Number')\r",
							"})\r",
							"pm.test('check value age from response = age from request', function(){\r",
							"    pm.expect(resp.age).to.eql('41')\r",
							"})\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test('check type of salary response', function(){\r",
							"    pm.expect(resp.salary).to.be.a('Number')\r",
							"})\r",
							"\r",
							"pm.test('check value response salary = request salary', function(){\r",
							"    pm.expect(resp.salary).to.eql(500)\r",
							"})\r",
							"//7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"console.log(req.age)\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('check value response name = request name', function(){\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('check value response age = request age', function(){\r",
							"    pm.expect(resp.age).to.eql(req.age)\r",
							"} )\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test('check value response salary = request salary', function(){\r",
							"    pm.expect(resp.salary).to.eql(+req.salary)\r",
							"})\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('check response u_salary_1_5_year = salary*4', function(){\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary * 4)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Hanna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "41",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test('is status code 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"} )\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});pm.test(\"response must be valid and not to  have a body\", function () {\r",
							"     pm.response.to.not.be.withBody;\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json()\r",
							"console.log(resp.family.children)\r",
							"//4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject()\r",
							"console.log(req.age)\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('check value response name = request name', function(){\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test('check value response age = request age', function(){\r",
							"    pm.expect(resp.age).to.eql(req.age)\r",
							"})\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test('check type of response salary = String ',function(){\r",
							"    pm.expect(resp.salary).to.be.a('String')\r",
							"    })\r",
							"pm.test('check type of request salary = String ',function(){\r",
							"    pm.expect(req.salary).to.be.a('String')\r",
							"})\r",
							"pm.test('check value response salary = value request salary', function(){\r",
							"    pm.expect(resp.salary).to.eql(+req.salary)\r",
							"})\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('check not empty ', function(){\r",
							"    pm.expect(resp.family.children).to.not.empty\r",
							"})\r",
							"pm.test('check dog has name', function(){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('name')\r",
							"})\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test('check dog has age',function(){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('age')\r",
							"})\r",
							"pm.test('check resp has any keys age',function(){\r",
							"    pm.expect(resp).to.have.any.keys('age')\r",
							"})\r",
							"pm.test('check resp not has any keys ooo',function(){\r",
							"    pm.expect(resp).to.not.have.any.keys('ooo')\r",
							"})\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test('check dog has name Luky ', function(){\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky')\r",
							"})\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test('check dog age is 4', function(){\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrei&age=41&salary=8000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrei"
						},
						{
							"key": "age",
							"value": "41"
						},
						{
							"key": "salary",
							"value": "8000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test('is status code 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"console.log(resp)\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"console.log(req.name)\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Check name response = name request', function(){\r",
							"    pm.expect(req.name).to.eql(resp.name)\r",
							"})\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('check type of response age',function(){\r",
							"    pm.expect(resp.age).to.be.a('number')\r",
							"})\r",
							"pm.test('check value age response = value age request', function(){\r",
							"    pm.expect(resp.age).to.eql(+req.age)\r",
							"})\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('check value salary[0] response = value salary request', function(){\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('check value salary[1] response = value salary*2 request',function(){ pm.expect(+resp.salary[1]).to.eql(req.salary*2)})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('check value salary[2] response = value salary*3 request',function(){ pm.expect(+resp.salary[2]).to.eql(req.salary*3)})\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Ratmir\");\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"15\");\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"1200\");\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for(let i = 0; i < resp.salary.length ; i++){\r",
							"    console.log('KKK' + resp.salary[i])\r",
							"} \r",
							"resp.salary.forEach(el => console.log(el + 'FFF'))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ivank&age=124&salary=1300",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivank"
						},
						{
							"key": "age",
							"value": "124"
						},
						{
							"key": "salary",
							"value": "1300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test('Is status code 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"//6. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"console.log(resp)\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"console.log(req.name)\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"has a response property start_qa_salary \", function () {\r",
							"    pm.expect(resp.start_qa_salary).not.eql(undefined)\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"has a response property qa_salary_after_6_months \", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).not.eql(undefined)\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"has a response property qa_salary_after_12_months \", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).not.eql(undefined)\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"has a response param qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"has response param qa_salary_after_3.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_3.5_year\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test('has a response params person', function(){\r",
							"    pm.expect(JSON.stringify(resp)).to.include('person')\r",
							"})\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('check response start_qa_salary = request salary', function(){\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary)\r",
							"})\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('check response qa_salary_after_6_months = request salary * 2', function(){\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary * 2)\r",
							"})\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('check response qa_salary_after_12_months = request salary * 2.7', function(){\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary * 2.7)\r",
							"})\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"let qa_salary_after_18_months = resp['qa_salary_after_1.5_year'];\r",
							"console.log(qa_salary_after_18_months)\r",
							"pm.test('check response qa_salary_after_1.5_year = request salary * 3.3', function(){\r",
							"    pm.expect(qa_salary_after_18_months).to.eq(req.salary * 3.3)\r",
							"})\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let qa_salary_after_42_months = resp['qa_salary_after_3.5_years']\r",
							"pm.test('check response qa_salary_after_3.5_years = request salary * 3.8', function(){\r",
							"    pm.expect(qa_salary_after_42_months).to.eq(req.salary * 3.8)\r",
							"})\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('check [1] element response person.u_name = request salary',function(){\r",
							"pm.expect(resp.person.u_name[1]).to.eql(+req.salary)\r",
							"})\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('check responsep person u_age = request age', function(){\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age)\r",
							"})\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('check response u_salary_5_years = request salary * 4.2', function(){\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary * 4.2) \r",
							"})\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let respPersoneKey = Object.keys(resp.person)\r",
							"let respPersoneValue = Object.values(resp.person)\r",
							"\r",
							"for (let i = 0; i < respPersoneKey.length; i += 1)\r",
							"     console.log(respPersoneKey[i], respPersoneValue[i])\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}